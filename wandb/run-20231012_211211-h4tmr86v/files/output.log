
  0%|                                                                                                                                                                     | 0/16209 [00:00<?, ?it/s]Traceback (most recent call last):
  File "/media/yipeng/data/LLM-paper/train_sft_ebay.py", line 239, in <module>
    train()
  File "/media/yipeng/data/LLM-paper/train_sft_ebay.py", line 221, in train
    train_result = trainer.train()
  File "/home/yipeng/miniconda3/envs/llm/lib/python3.9/site-packages/transformers/trainer.py", line 1556, in train
    return inner_training_loop(
  File "/home/yipeng/miniconda3/envs/llm/lib/python3.9/site-packages/transformers/trainer.py", line 1838, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs)
  File "/home/yipeng/miniconda3/envs/llm/lib/python3.9/site-packages/transformers/trainer.py", line 2704, in training_step
    self.accelerator.backward(loss)
  File "/home/yipeng/miniconda3/envs/llm/lib/python3.9/site-packages/accelerate/accelerator.py", line 1985, in backward
    loss.backward(**kwargs)
  File "/home/yipeng/miniconda3/envs/llm/lib/python3.9/site-packages/torch/_tensor.py", line 487, in backward
    torch.autograd.backward(
  File "/home/yipeng/miniconda3/envs/llm/lib/python3.9/site-packages/torch/autograd/__init__.py", line 200, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
  File "/home/yipeng/miniconda3/envs/llm/lib/python3.9/site-packages/torch/autograd/function.py", line 274, in apply
    return user_fn(self, *args)
  File "/home/yipeng/miniconda3/envs/llm/lib/python3.9/site-packages/torch/utils/checkpoint.py", line 157, in backward
    torch.autograd.backward(outputs_with_grad, args_with_grad)
  File "/home/yipeng/miniconda3/envs/llm/lib/python3.9/site-packages/torch/autograd/__init__.py", line 200, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 2.21 GiB (GPU 0; 23.64 GiB total capacity; 18.27 GiB already allocated; 812.88 MiB free; 20.93 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF